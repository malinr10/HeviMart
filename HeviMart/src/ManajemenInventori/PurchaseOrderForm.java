/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ManajemenInventori;

import ManajemenInventori.SupplierItem;
import util.koneksi;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class PurchaseOrderForm extends javax.swing.JFrame {

    private DefaultTableModel modelTabel;
    private int selectedProductId = 0;

    /**
     * Creates new form PurchaseOrderForm
     */
    public PurchaseOrderForm() {
        initComponents();
        this.setLocationRelativeTo(null);
        // --- BAGIAN YANG DIPERBAIKI ---

        // 1. Buat instance DefaultTableModel yang baru dan bersih.
        modelTabel = new DefaultTableModel();

        // 2. Atur kolom-kolomnya.
        modelTabel.setColumnIdentifiers(new Object[]{
            "ID Produk",
            "Nama Produk",
            "Jumlah",
            "Harga Satuan",
            "Subtotal"
        });

        // 3. Paksa JTable (tblOrderItems) untuk menggunakan model yang BARU saja kita buat.
        // Ini adalah langkah paling penting.
        tblOrderItems.setModel(modelTabel);

        // --- AKHIR BAGIAN YANG DIPERBAIKI ---
        // Muat data untuk JComboBox pemasok
        loadSuppliers();
    }

    private void loadSuppliers() {
        DefaultComboBoxModel<SupplierItem> model = new DefaultComboBoxModel<>();
        try (Connection conn = koneksi.getKoneksi(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery("SELECT id_pemasok, nama_pemasok FROM PEMASOK ORDER BY nama_pemasok")) {
            while (rs.next()) {
                model.addElement(new SupplierItem(rs.getInt("id_pemasok"), rs.getString("nama_pemasok")));
            }
            cmbSupplier.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat pemasok: " + e.getMessage());
        }
    }

    private void updateGrandTotal() {
        BigDecimal grandTotal = BigDecimal.ZERO;

        // Loop melalui semua baris di tabel pesanan
        for (int i = 0; i < modelTabel.getRowCount(); i++) {
            // Ambil nilai subtotal dari kolom ke-4 (index 4)
            Object subtotalObj = modelTabel.getValueAt(i, 4);

            // PERBAIKAN: Periksa apakah nilainya tidak null dan merupakan tipe BigDecimal
            if (subtotalObj instanceof BigDecimal) {
                // Jika aman, baru tambahkan ke grandTotal
                grandTotal = grandTotal.add((BigDecimal) subtotalObj);
            }
        }

        lblGrandTotal.setText("Rp " + grandTotal.toPlainString()); // Cara lebih sederhana
    }

    private void clearProductSelection() {
        this.selectedProductId = 0;
        txtNamaProduk.setText("");
        txtHargaBeli.setText("");
        spnJumlah.setValue(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        cmbSupplier = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrderItems = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblGrandTotal = new javax.swing.JLabel();
        btnBuatPesanan = new javax.swing.JButton();
        btnCariProduk = new javax.swing.JButton();
        txtNamaProduk = new javax.swing.JTextField();
        txtHargaBeli = new javax.swing.JTextField();
        spnJumlah = new javax.swing.JSpinner();
        btnTambahItem = new javax.swing.JButton();
        btnHapusItem = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BG_PesanProduk = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1440, 1024));

        jPanel4.setPreferredSize(new java.awt.Dimension(1440, 1024));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbSupplier.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jPanel4.add(cmbSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 190, 210, 30));

        tblOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblOrderItems);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 577, 1080, 260));
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 190, -1, -1));

        lblGrandTotal.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jPanel4.add(lblGrandTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 870, 450, 40));

        btnBuatPesanan.setBorderPainted(false);
        btnBuatPesanan.setContentAreaFilled(false);
        btnBuatPesanan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuatPesananActionPerformed(evt);
            }
        });
        jPanel4.add(btnBuatPesanan, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 930, 200, 60));

        btnCariProduk.setBorderPainted(false);
        btnCariProduk.setContentAreaFilled(false);
        btnCariProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariProdukActionPerformed(evt);
            }
        });
        jPanel4.add(btnCariProduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 180, 250, 50));

        txtNamaProduk.setEditable(false);
        txtNamaProduk.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jPanel4.add(txtNamaProduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 282, 210, 30));

        txtHargaBeli.setEditable(false);
        txtHargaBeli.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jPanel4.add(txtHargaBeli, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 350, 210, 30));

        spnJumlah.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jPanel4.add(spnJumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 420, 210, 30));

        btnTambahItem.setBorderPainted(false);
        btnTambahItem.setContentAreaFilled(false);
        btnTambahItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahItemActionPerformed(evt);
            }
        });
        jPanel4.add(btnTambahItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 483, 270, 60));

        btnHapusItem.setBorderPainted(false);
        btnHapusItem.setContentAreaFilled(false);
        btnHapusItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusItemActionPerformed(evt);
            }
        });
        jPanel4.add(btnHapusItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 483, 240, 60));
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 290, -1, -1));
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 360, -1, -1));
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, -1, -1));

        BG_PesanProduk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Pemesanan Produk.png"))); // NOI18N
        jPanel4.add(BG_PesanProduk, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 866, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCariProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariProdukActionPerformed
        // TODO add your handling code here:
        ProductSearchDialog dialog = new ProductSearchDialog(this, true);
        dialog.setVisible(true);

        // Ambil hasil pilihan dari dialog
        if (dialog.selectedProductId != 0) {
            this.selectedProductId = dialog.selectedProductId;
            txtNamaProduk.setText(dialog.selectedProductName);
            txtHargaBeli.setText(dialog.selectedProductPrice.toPlainString());
        }
    }//GEN-LAST:event_btnCariProdukActionPerformed

    private void btnTambahItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahItemActionPerformed
        // TODO add your handling code here:
        if (this.selectedProductId == 0) {
            JOptionPane.showMessageDialog(this, "Silakan cari dan pilih produk terlebih dahulu!", "Produk Belum Dipilih", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // --- VALIDASI 2: Pastikan jumlah lebih dari nol ---
        int jumlah = (int) spnJumlah.getValue();
        if (jumlah <= 0) {
            JOptionPane.showMessageDialog(this, "Jumlah pesanan harus lebih dari 0.", "Jumlah Tidak Valid", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // --- VALIDASI 3: Pastikan field harga tidak kosong dan valid ---
        String hargaBeliString = txtHargaBeli.getText();
        if (hargaBeliString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Harga beli produk tidak boleh kosong.", "Data Tidak Lengkap", JOptionPane.WARNING_MESSAGE);
            return;
        }

        BigDecimal hargaBeli;
        try {
            hargaBeli = new BigDecimal(hargaBeliString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Format harga beli tidak valid.", "Format Salah", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Jika semua validasi lolos, baru proses data
        String namaProduk = txtNamaProduk.getText();
        BigDecimal subtotal = hargaBeli.multiply(new BigDecimal(jumlah));

        // Tambahkan baris baru ke tabel
        modelTabel.addRow(new Object[]{
            this.selectedProductId, // Pastikan ini Integer
            namaProduk, // String
            jumlah, // Pastikan ini Integer
            hargaBeli, // Pastikan ini BigDecimal
            subtotal // Pastikan ini BigDecimal
        });

        // Perbarui total dan bersihkan form input item
        updateGrandTotal();
        clearProductSelection();
    }//GEN-LAST:event_btnTambahItemActionPerformed

    private void btnHapusItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusItemActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblOrderItems.getSelectedRow();
        if (selectedRow != -1) {
            modelTabel.removeRow(selectedRow);
            updateGrandTotal();
        }
    }//GEN-LAST:event_btnHapusItemActionPerformed

    private void btnBuatPesananActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuatPesananActionPerformed
        // TODO add your handling code here:
        if (modelTabel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tambahkan item ke pesanan terlebih dahulu.");
            return;
        }
        SupplierItem supplier = (SupplierItem) cmbSupplier.getSelectedItem();
        if (supplier == null) {
            JOptionPane.showMessageDialog(this, "Pilih pemasok terlebih dahulu.");
            return;
        }

        BigDecimal totalHarga = BigDecimal.ZERO;
        for (int i = 0; i < modelTabel.getRowCount(); i++) {
            Object subtotalObj = modelTabel.getValueAt(i, 4);
            if (subtotalObj instanceof BigDecimal) {
                totalHarga = totalHarga.add((BigDecimal) subtotalObj);
            }
        }

        Connection conn = null;
        try {
            conn = koneksi.getKoneksi();
            conn.setAutoCommit(false); // Mulai transaksi

            // 1. Insert ke tabel PEMBELIAN
            String sqlPO = "INSERT INTO PEMBELIAN (kode_pembelian, id_pemasok, total_harga, status, id_pengguna) VALUES (?, ?, ?, 'Dipesan', ?)";
            PreparedStatement pstmtPO = conn.prepareStatement(sqlPO, Statement.RETURN_GENERATED_KEYS);
            pstmtPO.setString(1, "PO-" + System.currentTimeMillis());
            pstmtPO.setInt(2, supplier.getId());
            pstmtPO.setBigDecimal(3, totalHarga);
            pstmtPO.setInt(4, 1); // Ganti dengan ID user yang login
            pstmtPO.executeUpdate();

            ResultSet rsKeys = pstmtPO.getGeneratedKeys();
            int poId = rsKeys.next() ? rsKeys.getInt(1) : 0;
            if (poId == 0) {
                throw new SQLException("Gagal membuat data pesanan utama.");
            }

            // 2. Insert setiap item ke tabel DETAIL_PEMBELIAN
            String sqlDetail = "INSERT INTO DETAIL_PEMBELIAN (id_pembelian, id_produk, jumlah, harga_satuan, subtotal) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement pstmtDetail = conn.prepareStatement(sqlDetail);
            for (int i = 0; i < modelTabel.getRowCount(); i++) {
                // Ambil data sebagai Object terlebih dahulu
                Object idProdukObj = modelTabel.getValueAt(i, 0);
                Object jumlahObj = modelTabel.getValueAt(i, 2);
                Object hargaObj = modelTabel.getValueAt(i, 3);
                Object subtotalObj = modelTabel.getValueAt(i, 4);

                // Lakukan pemeriksaan null untuk semua nilai penting
                if (idProdukObj == null || jumlahObj == null || hargaObj == null || subtotalObj == null) {
                    // Lemparkan error jika ada data yang kosong di dalam tabel
                    throw new SQLException("Data tidak lengkap di dalam tabel pesanan pada baris " + (i + 1));
                }

                // Setelah dipastikan tidak null, baru lakukan casting dan set parameter
                pstmtDetail.setInt(1, poId);
                pstmtDetail.setInt(2, (Integer) idProdukObj);
                pstmtDetail.setInt(3, (Integer) jumlahObj);
                pstmtDetail.setBigDecimal(4, (BigDecimal) hargaObj);
                pstmtDetail.setBigDecimal(5, (BigDecimal) subtotalObj);

                pstmtDetail.addBatch();
            }
            pstmtDetail.executeBatch();

            conn.commit(); // Selesaikan transaksi
            JOptionPane.showMessageDialog(this, "Pesanan Pembelian berhasil dibuat dengan Kode: " + "PO-" + System.currentTimeMillis());
            modelTabel.setRowCount(0);
            updateGrandTotal();

        } catch (Exception e) {
            try {
                if (conn != null) {
                    conn.rollback();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Gagal membuat pesanan: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnBuatPesananActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseOrderForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BG_PesanProduk;
    private javax.swing.JButton btnBuatPesanan;
    private javax.swing.JButton btnCariProduk;
    private javax.swing.JButton btnHapusItem;
    private javax.swing.JButton btnTambahItem;
    private javax.swing.JComboBox<SupplierItem> cmbSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblGrandTotal;
    private javax.swing.JSpinner spnJumlah;
    private javax.swing.JTable tblOrderItems;
    private javax.swing.JTextField txtHargaBeli;
    private javax.swing.JTextField txtNamaProduk;
    // End of variables declaration//GEN-END:variables
}
