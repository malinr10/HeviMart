/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package ManajemenProduk;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import ManajemenProduk.KategoriItem;
import java.sql.SQLException;
import util.koneksi;

/**
 *
 * @author Lenovo
 */
public class ProdukFormDialog extends javax.swing.JDialog {

    private int productId;

    /**
     * Creates new form ProdukFormDialog
     */
    public ProdukFormDialog(java.awt.Frame parent, boolean modal, int productId) {
        super(parent, modal);
        initComponents();

        this.pack();
        this.productId = productId;
        loadKategoriComboBox();

        if (productId > 0) {
            this.setTitle("Edit Produk");
            txtBarcode.setEditable(true); // Barcode bisa diedit jika mode edit
            loadProductData();
        } else {
            this.setTitle("Tambah Produk Baru");
            txtBarcode.setEditable(false); // Barcode tidak bisa diedit saat menambah
            txtBarcode.setText("(Akan Dibuat Otomatis)");
        }
    }

    private void loadKategoriComboBox() {
        DefaultComboBoxModel<KategoriItem> model = new DefaultComboBoxModel<>();
        try {
            Connection conn = koneksi.getKoneksi();
            Statement stmt = conn.createStatement();
            // Ambil id dan nama kategori dari tabel KATEGORI 
            ResultSet rs = stmt.executeQuery("SELECT id_kategori, nama_kategori FROM KATEGORI ORDER BY nama_kategori");

            while (rs.next()) {
                int id = rs.getInt("id_kategori");
                String nama = rs.getString("nama_kategori");
                // Tambahkan objek KategoriItem ke model JComboBox
                model.addElement(new KategoriItem(id, nama));
            }
            cmbKategori.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data kategori: " + e.getMessage());
        }
    }

    private void loadProductData() {
        try {
            Connection conn = koneksi.getKoneksi();
            PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM PRODUK WHERE id_produk = ?");
            pstmt.setInt(1, this.productId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                txtNamaProduk.setText(rs.getString("nama_produk"));
                txtBarcode.setText(rs.getString("kode_barcode"));
                txtHargaBeli.setText(rs.getString("harga_beli"));
                txtHargaJual.setText(rs.getString("harga_jual"));
                txtStok.setText(rs.getString("jumlah_stok"));
                txtStokMinimum.setText(rs.getString("stok_minimum"));

                int idKategoriProduk = rs.getInt("id_kategori");

                // Dapatkan model dari JComboBox yang sudah terisi
                DefaultComboBoxModel<KategoriItem> model = (DefaultComboBoxModel<KategoriItem>) cmbKategori.getModel();

                // Loop melalui setiap item di ComboBox untuk menemukan yang cocok
                for (int i = 0; i < model.getSize(); i++) {
                    // Cek apakah ID KategoriItem di dalam ComboBox sama dengan ID kategori produk
                    if (model.getElementAt(i).getId() == idKategoriProduk) {
                        // Jika ID-nya cocok, pilih item tersebut
                        cmbKategori.setSelectedIndex(i);
                        break; // Hentikan loop karena item sudah ketemu
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat data produk: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNamaProduk = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBarcode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHargaBeli = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cmbKategori = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtHargaJual = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtStok = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtStokMinimum = new javax.swing.JTextField();
        btnSimpan = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nama Produk");

        jLabel2.setText("Kode Barcode");

        jLabel3.setText("Harga Beli");

        jLabel7.setText("Kategori");

        jLabel4.setText("Harga Jual");

        jLabel5.setText("Jumlah Stok");

        txtStok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStokActionPerformed(evt);
            }
        });

        jLabel6.setText("Stok Minimum");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtHargaJual)
                    .addComponent(cmbKategori, 0, 265, Short.MAX_VALUE)
                    .addComponent(txtHargaBeli)
                    .addComponent(txtBarcode)
                    .addComponent(txtNamaProduk)
                    .addComponent(txtStok)
                    .addComponent(txtStokMinimum))
                .addGap(0, 3, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNamaProduk, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHargaBeli, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbKategori, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHargaJual, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStok, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStokMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        getContentPane().add(btnSimpan, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtStokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStokActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStokActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // Ambil semua data dari form (kecuali barcode untuk produk baru)
        String nama = txtNamaProduk.getText();
        KategoriItem selectedKategori = (KategoriItem) cmbKategori.getSelectedItem();

        if (nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama produk tidak boleh kosong!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idKategori = selectedKategori.getId();

        Connection conn = null;
        try {
            conn = koneksi.getKoneksi();
            conn.setAutoCommit(false); // Mulai mode transaksi

            if (this.productId == 0) { // Mode Tambah (Logika Baru)
                String sqlInsert = "INSERT INTO PRODUK (nama_produk, id_kategori, harga_beli, harga_jual, jumlah_stok, stok_minimum) VALUES (?, ?, ?, ?, ?, ?)";
                PreparedStatement pstmtInsert = conn.prepareStatement(sqlInsert, Statement.RETURN_GENERATED_KEYS);

                pstmtInsert.setString(1, nama);
                pstmtInsert.setInt(2, idKategori);
                pstmtInsert.setDouble(3, Double.parseDouble(txtHargaBeli.getText()));
                pstmtInsert.setDouble(4, Double.parseDouble(txtHargaJual.getText()));
                pstmtInsert.setInt(5, Integer.parseInt(txtStok.getText()));
                pstmtInsert.setInt(6, Integer.parseInt(txtStokMinimum.getText()));

                pstmtInsert.executeUpdate();

                // LANGKAH 2: Ambil ID yang baru saja dibuat
                ResultSet generatedKeys = pstmtInsert.getGeneratedKeys();
                int newProductId;
                if (generatedKeys.next()) {
                    newProductId = generatedKeys.getInt(1);
                } else {
                    throw new SQLException("Gagal mendapatkan ID produk baru.");
                }

                // LANGKAH 3: Buat kode barcode berdasarkan ID
                // Contoh format: P000001, P000002, dst.
                String newBarcode = String.format("P%06d", newProductId);

                // LANGKAH 4: UPDATE produk dengan kode barcode baru
                String sqlUpdate = "UPDATE PRODUK SET kode_barcode = ? WHERE id_produk = ?";
                PreparedStatement pstmtUpdate = conn.prepareStatement(sqlUpdate);
                pstmtUpdate.setString(1, newBarcode);
                pstmtUpdate.setInt(2, newProductId);
                pstmtUpdate.executeUpdate();

            } else { // Mode Edit (Logika Lama, tetap sama)
                String sql = "UPDATE PRODUK SET nama_produk=?, id_kategori=?, kode_barcode=?, harga_beli=?, harga_jual=?, jumlah_stok=?, stok_minimum=? WHERE id_produk=?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                // Set parameter
                pstmt.setString(1, nama);
                pstmt.setInt(2, idKategori); // Update ID kategori
                pstmt.setString(3, txtBarcode.getText());
                pstmt.setDouble(4, Double.parseDouble(txtHargaBeli.getText()));
                pstmt.setDouble(5, Double.parseDouble(txtHargaJual.getText()));
                pstmt.setInt(6, Integer.parseInt(txtStok.getText()));
                pstmt.setInt(7, Integer.parseInt(txtStokMinimum.getText()));
                pstmt.setInt(8, this.productId);

                pstmt.executeUpdate();
            }

            conn.commit(); // Konfirmasi semua perubahan jika berhasil
            JOptionPane.showMessageDialog(this, "Data produk berhasil disimpan!");
            this.dispose();

        } catch (Exception e) {
            try {
                if (conn != null) {
                    conn.rollback(); // Batalkan transaksi jika ada error
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true); // Kembalikan ke mode auto-commit
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProdukFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProdukFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProdukFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProdukFormDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnSimpan;
    private javax.swing.JComboBox<KategoriItem> cmbKategori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtBarcode;
    private javax.swing.JTextField txtHargaBeli;
    private javax.swing.JTextField txtHargaJual;
    private javax.swing.JTextField txtNamaProduk;
    private javax.swing.JTextField txtStok;
    private javax.swing.JTextField txtStokMinimum;
    // End of variables declaration//GEN-END:variables
}
